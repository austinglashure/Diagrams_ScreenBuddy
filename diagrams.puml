@startuml Account Actions Sequence Diagram

Actor User
Participant Client
Database MongoDB
Participant Sendgrid


User -> Client: Navigates to Sign Up Screen

loop Until Valid Username

    User -> Client: Inputs Signup Information
    Client -> MongoDB: Username Check

    alt Username is Valid
        MongoDB -> Client: Valid Username Response

    else Username is Invalid
        MongoDB -> Client: Invalid Username Response
        Client -> User: Prompt User to Change Username
    end
end

Client -> MongoDB: Create Account
MongoDB -> Client: Account Created Response
Client -> Sendgrid: Send Email with Code
Sendgrid -> Client: 200 Response
Client -> User: 'Check your Email' Page
User -> User: Collects code from email
User -> Client: Inputs code from email
Client -> User: Prompts user to login

loop Until Correct Login Credentials

    User -> Client: Enters Account Credentials
    Client -> MongoDB: Login

    alt Successful Login
        MongoDB -> Client: Valid Login Response

    else Incorrect Login
        MongoDB -> Client: Invalid Login Response
        Client -> User: Prompt User to Correct Credentials
    end
end

Client -> User: Display Logged in screen

@enduml

@startuml Mobile Actions

Actor User
Participant Client
Database MongoDB

Client -> User: Display Logged in screen
loop User Actions
    opt Set Goal
        User -> Client: Navigate to goals
        Client -> User: Displays goals view
        User -> Client: Sets goal
        Client -> MongoDB: Logs goal change in mongodb
        MongoDB -> Client: Goal change response
        Client -> User: Displays Updated Goal
    end

    opt View Statistics
        User -> Client: Navigates to statistics
        Client -> MongoDB: Gets User Statistics
        MongoDB -> Client: Returns User Statistics
        Client -> User: Displays Statistics as graphs
    end

    opt Purchase Item
        User -> Client: Navigates to shop
        Client -> User: Displays shop
        User -> Client: Selects item for purchase
        Client -> MongoDB: Adds purchased item to inventory
        MongoDB -> Client: Returns updated inventory
        Client -> User: Updates shop to reflect purchased item
    end
end

@enduml

@startuml Use Case Diagram
' overall layout
left to right direction

' Actors
actor "User" as User
actor "New User" as NewUser
actor "Existing User" as ExistingUser

ExistingUser -> User
NewUser -> User

' External systems
component "SendGrid" as SendGrid
database  "MongoDB"  as MongoDB

' System boundary
rectangle "ScreenBuddy" {

    ' Use‐Cases (with colors roughly matching your ovals)
    usecase UC_Create as "Create an account" #LightSlateGray
    usecase UC_Username as "Username Taken" #LightCoral
    usecase UC_SendEmail as "Send Account\nVerification Email" #DarkSeaGreen

    usecase UC_Login as "Login" #LightSlateGray
    usecase UC_Invalid as "Invalid Credentials" #LightCoral

    usecase UC_SetGoal as "Set Screentime Goal" #Plum
    usecase UC_SpendCoins as "Spend Coins on Buddy" #Plum
    usecase UC_EquipColor as "Equip Color" #Plum
    usecase UC_WatchAd as "Watch Ad" #Plum
    usecase UC_ViewDash as "View Statistics\nDashboard" #Plum

    usecase UC_Monitor as "Monitor Phone Usage" #DarkSeaGreen
    usecase UC_FetchData as "Fetch User Data" #DarkSeaGreen
  
    ' account creation
    NewUser --> UC_Create
    UC_Create <|-- UC_Username : <<extends>>
    UC_Create --> UC_SendEmail : <<includes>>

    ' login and post‐login actions
    ExistingUser --> UC_Login
    UC_Login <|-- UC_Invalid : <<extends>>

    UC_Login --> UC_SetGoal
    UC_Login --> UC_SpendCoins
    UC_Login --> UC_EquipColor
    UC_Login --> UC_WatchAd
    UC_Login --> UC_ViewDash

    ' feature → backend
    UC_SetGoal --> UC_Monitor
    UC_ViewDash --> UC_FetchData
}

' arrows to externals
UC_Create --> MongoDB
UC_EquipColor --> MongoDB
UC_SpendCoins --> MongoDB
UC_SendEmail --> SendGrid
UC_Monitor --> MongoDB
UC_FetchData --> MongoDB

@enduml

